apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "starter-kit.fullname" . }}
  annotations:
  {{- if and .Values.vcsInfo.repoUrl .Values.vcsInfo.branch }}
    app.openshift.io/vcs-ref: {{ .Values.vcsInfo.branch }}
    app.openshift.io/vcs-uri: {{ .Values.vcsInfo.repoUrl }}
  {{- end }}
  {{- if .Values.connectsTo }}
    app.openshift.io/connects-to: {{ .Values.connectsTo }}
  {{- end }}
  labels:
    app.kubernetes.io/name: {{ include "starter-kit.name" . }}
    helm.sh/chart: {{ include "starter-kit.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app: {{ .Release.Name }}
    {{- if .Values.partOf }}
    app.kubernetes.io/part-of: {{ .Values.partOf }}
    {{- end}}
    {{- if .Values.runtime }}
    app.openshift.io/runtime: {{ .Values.runtime }}
    {{- end}}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "starter-kit.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "starter-kit.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- if .Values.image.secretName }}
      imagePullSecrets:
        - name: {{ .Values.image.secretName }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}

          ports:
            - name: http
              containerPort: {{ .Values.image.port }}
              protocol: TCP
          livenessProbe:
            failureThreshold: 60
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 120
            periodSeconds: 120
          readinessProbe:
            failureThreshold: 60
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 120
            periodSeconds: 120
            timeoutSeconds: 130
          env:
            - name: INGRESS_HOST
              value: ""
            - name: PROTOCOLS
              value: ""
            - name: LOG_LEVEL
              value: {{ .Values.logLevel | quote }}
            - name: INVENTORY_MYSQL_DB_HOST
              value: {{ .Values.dbHost }}
            - name: INVENTORY_MYSQL_DB_PORT
              value: {{ .Values.dbPort }}
            - name: INVENTORY_MYSQL_DB_USERNAME
              value: {{ default "dbuser" .Values.dbUsername }}
            - name: INVENTORY_MYSQL_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mysql-password
                  name: inventory-mysql
                  name: {{ default "inventory-mysql" .Values.mysqlSecretName }}
          envFrom:
            - configMapRef:
                name: {{ default "jaeger-config" .Values.jaegerConfigName }}
                optional: true
            - secretRef:
                name: {{ default "jaeger-access" .Values.jaegerSecretName }}
                optional: true
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
